import java.util.Scanner;

// Clase base para Figuras
abstract class Figura {
    abstract double calcularArea();
    abstract double calcularPerimetro();
}

// Círculo
class Circulo extends Figura {
    double radio;
    Circulo(double radio) { this.radio = radio; }

    public double calcularArea() { return Math.PI * radio * radio; }
    public double calcularPerimetro() { return 2 * Math.PI * radio; }
}

// Cuadrado
class Cuadrado extends Figura {
    double lado;
    Cuadrado(double lado) { this.lado = lado; }

    public double calcularArea() { return lado * lado; }
    public double calcularPerimetro() { return 4 * lado; }
}

// Triángulo
class Triangulo extends Figura {
    double base, altura, l2, l3;
    boolean calcularArea;

    Triangulo(double base, double altura) {
        this.base = base; this.altura = altura;
        calcularArea = true;
    }

    Triangulo(double l1, double l2, double l3) {
        this.base = l1; this.l2 = l2; this.l3 = l3;
        calcularArea = false;
    }

    public double calcularArea() {
        return (base * altura) / 2;
    }

    public double calcularPerimetro() {
        return base + l2 + l3;
    }
}

// Rectángulo
class Rectangulo extends Figura {
    double base, altura;
    Rectangulo(double base, double altura) {
        this.base = base; this.altura = altura;
    }

    public double calcularArea() { return base * altura; }
    public double calcularPerimetro() { return 2 * (base + altura); }
}

// Pentágono
class Pentagono extends Figura {
    double lado, apotema;
    boolean calcularArea;

    Pentagono(double lado, double apotema) {
        this.lado = lado; this.apotema = apotema;
        calcularArea = true;
    }

    Pentagono(double lado) {
        this.lado = lado;
        calcularArea = false;
    }

    public double calcularArea() {
        return (5 * lado * apotema) / 2;
    }

    public double calcularPerimetro() {
        return 5 * lado;
    }
}

// Clase principal
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] historial = new String[100];
        int historialIndex = 0;
        int opcion;

        do {
            mostrarMenu();
            opcion = obtenerEntrada(scanner, 1, 8);

            if (opcion == 8) {
                System.out.println("Saliendo...");
                break;
            } else if (opcion == 7) {
                mostrarHistorial(historial, historialIndex);
            } else if (opcion == 6) {
                historialIndex = calcularPotencia(scanner, historial, historialIndex);
            } else {
                int tipo = elegirOperacion(scanner);
                Figura figura = null;
                String descripcion = "";

                switch (opcion) {
                    case 1:
                        double r = obtenerDouble(scanner, "Radio: ");
                        figura = new Circulo(r);
                        descripcion = "Círculo";
                        break;
                    case 2:
                        double l = obtenerDouble(scanner, "Lado: ");
                        figura = new Cuadrado(l);
                        descripcion = "Cuadrado";
                        break;
                    case 3:
                        if (tipo == 1) {
                            double base = obtenerDouble(scanner, "Base: ");
                            double altura = obtenerDouble(scanner, "Altura: ");
                            figura = new Triangulo(base, altura);
                            descripcion = "Triángulo (Área)";
                        } else {
                            double a = obtenerDouble(scanner, "Lado 1: ");
                            double b = obtenerDouble(scanner, "Lado 2: ");
                            double c = obtenerDouble(scanner, "Lado 3: ");
                            figura = new Triangulo(a, b, c);
                            descripcion = "Triángulo (Perímetro)";
                        }
                        break;
                    case 4:
                        double baseR = obtenerDouble(scanner, "Base: ");
                        double alturaR = obtenerDouble(scanner, "Altura: ");
                        figura = new Rectangulo(baseR, alturaR);
                        descripcion = "Rectángulo";
                        break;
                    case 5:
                        double lado = obtenerDouble(scanner, "Lado: ");
                        if (tipo == 1) {
                            double apotema = obtenerDouble(scanner, "Apotema: ");
                            figura = new Pentagono(lado, apotema);
                            descripcion = "Pentágono (Área)";
                        } else {
                            figura = new Pentagono(lado);
                            descripcion = "Pentágono (Perímetro)";
                        }
                        break;
                }

                double resultado = (tipo == 1) ? figura.calcularArea() : figura.calcularPerimetro();
                String tipoCalc = (tipo == 1) ? "Área" : "Perímetro";
                System.out.printf("%s - %s: %.2f\n", tipoCalc, descripcion, resultado);
                historial[historialIndex++] = tipoCalc + " de " + descripcion + ": " + String.format("%.2f", resultado);
            }
        } while (opcion != 8);

        scanner.close();
    }


    public static void mostrarMenu() {
        System.out.println("\n--- Calculadora de Área, Perímetro y Potencia ---");
        System.out.println("1. Círculo");
        System.out.println("2. Cuadrado");
        System.out.println("3. Triángulo");
        System.out.println("4. Rectángulo");
        System.out.println("5. Pentágono");
        System.out.println("6. Potencia");
        System.out.println("7. Ver historial");
        System.out.println("8. Salir");
        System.out.print("Elija una opción: ");
    }

    public static int obtenerEntrada(Scanner scanner, int min, int max) {
        while (true) {
            try {
                int entrada = scanner.nextInt();
                scanner.nextLine();
                if (entrada >= min && entrada <= max) return entrada;
                System.out.println("Error: Ingrese un número válido.");
            } catch (Exception e) {
                System.out.println("Entrada inválida.");
                scanner.nextLine();
            }
        }
    }

    public static double obtenerDouble(Scanner scanner, String mensaje) {
        while (true) {
            try {
                System.out.print(mensaje);
                double valor = scanner.nextDouble();
                scanner.nextLine();
                return valor;
            } catch (Exception e) {
                System.out.println("Número inválido.");
                scanner.nextLine();
            }
        }
    }

    public static int elegirOperacion(Scanner scanner) {
        System.out.println("¿Qué desea calcular?");
        System.out.println("1. Área");
        System.out.println("2. Perímetro");
        return obtenerEntrada(scanner, 1, 2);
    }

    public static int calcularPotencia(Scanner scanner, String[] historial, int historialIndex) {
        double base = obtenerDouble(scanner, "Base: ");
        int exponente;
        while (true) {
            exponente = (int) obtenerDouble(scanner, "Exponente (entero): ");
            if (exponente >= 0) break;
            System.out.println("Debe ser entero positivo.");
        }

        double resultado = potencia(base, exponente);
        String desc = "Potencia de " + base + "^" + exponente;
        System.out.printf("%s: %.2f\n", desc, resultado);
        historial[historialIndex++] = desc + ": " + String.format("%.2f", resultado);
        return historialIndex;
    }

    public static double potencia(double base, int exp) {
        if (exp == 0) return 1;
        return base * potencia(base, exp - 1);
    }

    public static void mostrarHistorial(String[] historial, int index) {
        System.out.println("\n--- Historial ---");
        if (index == 0) System.out.println("Sin cálculos.");
        else {
            for (int i = 0; i < index; i++) {
                System.out.println((i + 1) + ". " + historial[i]);
            }
        }
    }
}
